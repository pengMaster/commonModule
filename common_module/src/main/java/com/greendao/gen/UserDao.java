package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mtm.common_module.user.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "T_USER".
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "T_USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property LoginName = new Property(1, String.class, "loginName", false, "LOGINNAME");
        public final static Property KeyType = new Property(2, String.class, "keyType", false, "KEYTYPE");
        public final static Property KeyID = new Property(3, String.class, "keyID", false, "KEYID");
        public final static Property PassWord = new Property(4, String.class, "passWord", false, "PASSWORD");
        public final static Property UserName = new Property(5, String.class, "userName", false, "USERNAME");
        public final static Property PhotoName = new Property(6, String.class, "photoName", false, "PHOTONAME");
        public final static Property IdCard = new Property(7, String.class, "idCard", false, "IDCARD");
        public final static Property Sex = new Property(8, String.class, "sex", false, "SEX");
        public final static Property Age = new Property(9, String.class, "age", false, "AGE");
        public final static Property Birthday = new Property(10, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Tel = new Property(11, String.class, "tel", false, "TEL");
        public final static Property Email = new Property(12, String.class, "email", false, "EMAIL");
        public final static Property DeptID = new Property(13, String.class, "deptID", false, "DEPTID");
        public final static Property OrgCode = new Property(14, String.class, "orgCode", false, "ORGCODE");
        public final static Property Sms = new Property(15, String.class, "sms", false, "SMS");
        public final static Property Fastchancl = new Property(16, String.class, "fastchancl", false, "FASTCHANCL");
        public final static Property Post = new Property(17, String.class, "post", false, "POST");
        public final static Property PostLevel = new Property(18, String.class, "postLevel", false, "POSTLEVEL");
        public final static Property Title = new Property(19, String.class, "title", false, "TITLE");
        public final static Property TitleLevel = new Property(20, String.class, "titleLevel", false, "TITLELEVEL");
        public final static Property MobileTel = new Property(21, String.class, "mobileTel", false, "MOBILETEL");
        public final static Property PoliticalLandscape = new Property(22, String.class, "politicalLandscape", false, "POLITICALLANDSCAPE");
        public final static Property Degrees = new Property(23, String.class, "degrees", false, "DEGREES");
        public final static Property Education = new Property(24, String.class, "education", false, "EDUCATION");
        public final static Property Graduated = new Property(25, String.class, "graduated", false, "GRADUATED");
        public final static Property Professional = new Property(26, String.class, "professional", false, "PROFESSIONAL");
        public final static Property CountryCode = new Property(27, String.class, "countryCode", false, "COUNTRYCODE");
        public final static Property ProvinceCode = new Property(28, String.class, "provinceCode", false, "PROVINCECODE");
        public final static Property CityCode = new Property(29, String.class, "cityCode", false, "CITYCODE");
        public final static Property DistrictCode = new Property(30, String.class, "districtCode", false, "DISTRICTCODE");
        public final static Property DeptName = new Property(31, String.class, "deptName", false, "DEPTNAME");
        public final static Property OrgName = new Property(32, String.class, "orgName", false, "ORGNAME");
        public final static Property IsSupervisors = new Property(33, String.class, "isSupervisors", false, "ISSUPERVISORS");
        public final static Property SupervisorsNumber = new Property(34, String.class, "supervisorsNumber", false, "SUPERVISORSNUMBER");
        public final static Property SupervisorsCardNumber = new Property(35, String.class, "supervisorsCardNumber", false, "SUPERVISORSCARDNUMBER");
        public final static Property SupervisionYear = new Property(36, String.class, "supervisionYear", false, "SUPERVISION_YEAR");
        public final static Property CreateTime = new Property(37, String.class, "createTime", false, "CREATETIME");
        public final static Property IsDeleted = new Property(38, String.class, "isDeleted", false, "ISDELETED");
        public final static Property UpdateTime = new Property(39, String.class, "updateTime", false, "UPDATETIME");
        public final static Property DeleteTime = new Property(40, String.class, "deleteTime", false, "DELETETIME");
        public final static Property UserLevel = new Property(41, String.class, "userLevel", false, "USERLEVEL");
        public final static Property Sort = new Property(42, int.class, "sort", false, "SORT");
        public final static Property Speccode = new Property(43, String.class, "speccode", false, "SPECCODE");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"T_USER\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"LOGINNAME\" TEXT," + // 1: loginName
                "\"KEYTYPE\" TEXT," + // 2: keyType
                "\"KEYID\" TEXT," + // 3: keyID
                "\"PASSWORD\" TEXT," + // 4: passWord
                "\"USERNAME\" TEXT," + // 5: userName
                "\"PHOTONAME\" TEXT," + // 6: photoName
                "\"IDCARD\" TEXT," + // 7: idCard
                "\"SEX\" TEXT," + // 8: sex
                "\"AGE\" TEXT," + // 9: age
                "\"BIRTHDAY\" TEXT," + // 10: birthday
                "\"TEL\" TEXT," + // 11: tel
                "\"EMAIL\" TEXT," + // 12: email
                "\"DEPTID\" TEXT," + // 13: deptID
                "\"ORGCODE\" TEXT," + // 14: orgCode
                "\"SMS\" TEXT," + // 15: sms
                "\"FASTCHANCL\" TEXT," + // 16: fastchancl
                "\"POST\" TEXT," + // 17: post
                "\"POSTLEVEL\" TEXT," + // 18: postLevel
                "\"TITLE\" TEXT," + // 19: title
                "\"TITLELEVEL\" TEXT," + // 20: titleLevel
                "\"MOBILETEL\" TEXT," + // 21: mobileTel
                "\"POLITICALLANDSCAPE\" TEXT," + // 22: politicalLandscape
                "\"DEGREES\" TEXT," + // 23: degrees
                "\"EDUCATION\" TEXT," + // 24: education
                "\"GRADUATED\" TEXT," + // 25: graduated
                "\"PROFESSIONAL\" TEXT," + // 26: professional
                "\"COUNTRYCODE\" TEXT," + // 27: countryCode
                "\"PROVINCECODE\" TEXT," + // 28: provinceCode
                "\"CITYCODE\" TEXT," + // 29: cityCode
                "\"DISTRICTCODE\" TEXT," + // 30: districtCode
                "\"DEPTNAME\" TEXT," + // 31: deptName
                "\"ORGNAME\" TEXT," + // 32: orgName
                "\"ISSUPERVISORS\" TEXT," + // 33: isSupervisors
                "\"SUPERVISORSNUMBER\" TEXT," + // 34: supervisorsNumber
                "\"SUPERVISORSCARDNUMBER\" TEXT," + // 35: supervisorsCardNumber
                "\"SUPERVISION_YEAR\" TEXT," + // 36: supervisionYear
                "\"CREATETIME\" TEXT," + // 37: createTime
                "\"ISDELETED\" TEXT," + // 38: isDeleted
                "\"UPDATETIME\" TEXT," + // 39: updateTime
                "\"DELETETIME\" TEXT," + // 40: deleteTime
                "\"USERLEVEL\" TEXT," + // 41: userLevel
                "\"SORT\" INTEGER NOT NULL ," + // 42: sort
                "\"SPECCODE\" TEXT);"); // 43: speccode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"T_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(2, loginName);
        }
 
        String keyType = entity.getKeyType();
        if (keyType != null) {
            stmt.bindString(3, keyType);
        }
 
        String keyID = entity.getKeyID();
        if (keyID != null) {
            stmt.bindString(4, keyID);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(5, passWord);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(6, userName);
        }
 
        String photoName = entity.getPhotoName();
        if (photoName != null) {
            stmt.bindString(7, photoName);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(8, idCard);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(9, sex);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(10, age);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(11, birthday);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(12, tel);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(13, email);
        }
 
        String deptID = entity.getDeptID();
        if (deptID != null) {
            stmt.bindString(14, deptID);
        }
 
        String orgCode = entity.getOrgCode();
        if (orgCode != null) {
            stmt.bindString(15, orgCode);
        }
 
        String sms = entity.getSms();
        if (sms != null) {
            stmt.bindString(16, sms);
        }
 
        String fastchancl = entity.getFastchancl();
        if (fastchancl != null) {
            stmt.bindString(17, fastchancl);
        }
 
        String post = entity.getPost();
        if (post != null) {
            stmt.bindString(18, post);
        }
 
        String postLevel = entity.getPostLevel();
        if (postLevel != null) {
            stmt.bindString(19, postLevel);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(20, title);
        }
 
        String titleLevel = entity.getTitleLevel();
        if (titleLevel != null) {
            stmt.bindString(21, titleLevel);
        }
 
        String mobileTel = entity.getMobileTel();
        if (mobileTel != null) {
            stmt.bindString(22, mobileTel);
        }
 
        String politicalLandscape = entity.getPoliticalLandscape();
        if (politicalLandscape != null) {
            stmt.bindString(23, politicalLandscape);
        }
 
        String degrees = entity.getDegrees();
        if (degrees != null) {
            stmt.bindString(24, degrees);
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(25, education);
        }
 
        String graduated = entity.getGraduated();
        if (graduated != null) {
            stmt.bindString(26, graduated);
        }
 
        String professional = entity.getProfessional();
        if (professional != null) {
            stmt.bindString(27, professional);
        }
 
        String countryCode = entity.getCountryCode();
        if (countryCode != null) {
            stmt.bindString(28, countryCode);
        }
 
        String provinceCode = entity.getProvinceCode();
        if (provinceCode != null) {
            stmt.bindString(29, provinceCode);
        }
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(30, cityCode);
        }
 
        String districtCode = entity.getDistrictCode();
        if (districtCode != null) {
            stmt.bindString(31, districtCode);
        }
 
        String deptName = entity.getDeptName();
        if (deptName != null) {
            stmt.bindString(32, deptName);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(33, orgName);
        }
 
        String isSupervisors = entity.getIsSupervisors();
        if (isSupervisors != null) {
            stmt.bindString(34, isSupervisors);
        }
 
        String supervisorsNumber = entity.getSupervisorsNumber();
        if (supervisorsNumber != null) {
            stmt.bindString(35, supervisorsNumber);
        }
 
        String supervisorsCardNumber = entity.getSupervisorsCardNumber();
        if (supervisorsCardNumber != null) {
            stmt.bindString(36, supervisorsCardNumber);
        }
 
        String supervisionYear = entity.getSupervisionYear();
        if (supervisionYear != null) {
            stmt.bindString(37, supervisionYear);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(38, createTime);
        }
 
        String isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindString(39, isDeleted);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(40, updateTime);
        }
 
        String deleteTime = entity.getDeleteTime();
        if (deleteTime != null) {
            stmt.bindString(41, deleteTime);
        }
 
        String userLevel = entity.getUserLevel();
        if (userLevel != null) {
            stmt.bindString(42, userLevel);
        }
        stmt.bindLong(43, entity.getSort());
 
        String speccode = entity.getSpeccode();
        if (speccode != null) {
            stmt.bindString(44, speccode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(2, loginName);
        }
 
        String keyType = entity.getKeyType();
        if (keyType != null) {
            stmt.bindString(3, keyType);
        }
 
        String keyID = entity.getKeyID();
        if (keyID != null) {
            stmt.bindString(4, keyID);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(5, passWord);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(6, userName);
        }
 
        String photoName = entity.getPhotoName();
        if (photoName != null) {
            stmt.bindString(7, photoName);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(8, idCard);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(9, sex);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(10, age);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(11, birthday);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(12, tel);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(13, email);
        }
 
        String deptID = entity.getDeptID();
        if (deptID != null) {
            stmt.bindString(14, deptID);
        }
 
        String orgCode = entity.getOrgCode();
        if (orgCode != null) {
            stmt.bindString(15, orgCode);
        }
 
        String sms = entity.getSms();
        if (sms != null) {
            stmt.bindString(16, sms);
        }
 
        String fastchancl = entity.getFastchancl();
        if (fastchancl != null) {
            stmt.bindString(17, fastchancl);
        }
 
        String post = entity.getPost();
        if (post != null) {
            stmt.bindString(18, post);
        }
 
        String postLevel = entity.getPostLevel();
        if (postLevel != null) {
            stmt.bindString(19, postLevel);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(20, title);
        }
 
        String titleLevel = entity.getTitleLevel();
        if (titleLevel != null) {
            stmt.bindString(21, titleLevel);
        }
 
        String mobileTel = entity.getMobileTel();
        if (mobileTel != null) {
            stmt.bindString(22, mobileTel);
        }
 
        String politicalLandscape = entity.getPoliticalLandscape();
        if (politicalLandscape != null) {
            stmt.bindString(23, politicalLandscape);
        }
 
        String degrees = entity.getDegrees();
        if (degrees != null) {
            stmt.bindString(24, degrees);
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(25, education);
        }
 
        String graduated = entity.getGraduated();
        if (graduated != null) {
            stmt.bindString(26, graduated);
        }
 
        String professional = entity.getProfessional();
        if (professional != null) {
            stmt.bindString(27, professional);
        }
 
        String countryCode = entity.getCountryCode();
        if (countryCode != null) {
            stmt.bindString(28, countryCode);
        }
 
        String provinceCode = entity.getProvinceCode();
        if (provinceCode != null) {
            stmt.bindString(29, provinceCode);
        }
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(30, cityCode);
        }
 
        String districtCode = entity.getDistrictCode();
        if (districtCode != null) {
            stmt.bindString(31, districtCode);
        }
 
        String deptName = entity.getDeptName();
        if (deptName != null) {
            stmt.bindString(32, deptName);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(33, orgName);
        }
 
        String isSupervisors = entity.getIsSupervisors();
        if (isSupervisors != null) {
            stmt.bindString(34, isSupervisors);
        }
 
        String supervisorsNumber = entity.getSupervisorsNumber();
        if (supervisorsNumber != null) {
            stmt.bindString(35, supervisorsNumber);
        }
 
        String supervisorsCardNumber = entity.getSupervisorsCardNumber();
        if (supervisorsCardNumber != null) {
            stmt.bindString(36, supervisorsCardNumber);
        }
 
        String supervisionYear = entity.getSupervisionYear();
        if (supervisionYear != null) {
            stmt.bindString(37, supervisionYear);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(38, createTime);
        }
 
        String isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindString(39, isDeleted);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(40, updateTime);
        }
 
        String deleteTime = entity.getDeleteTime();
        if (deleteTime != null) {
            stmt.bindString(41, deleteTime);
        }
 
        String userLevel = entity.getUserLevel();
        if (userLevel != null) {
            stmt.bindString(42, userLevel);
        }
        stmt.bindLong(43, entity.getSort());
 
        String speccode = entity.getSpeccode();
        if (speccode != null) {
            stmt.bindString(44, speccode);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // loginName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // keyType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // keyID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // passWord
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // photoName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // idCard
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sex
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // age
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // birthday
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // tel
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // email
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // deptID
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // orgCode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // sms
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // fastchancl
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // post
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // postLevel
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // title
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // titleLevel
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // mobileTel
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // politicalLandscape
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // degrees
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // education
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // graduated
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // professional
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // countryCode
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // provinceCode
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // cityCode
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // districtCode
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // deptName
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // orgName
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // isSupervisors
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // supervisorsNumber
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // supervisorsCardNumber
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // supervisionYear
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // createTime
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // isDeleted
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // updateTime
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // deleteTime
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // userLevel
            cursor.getInt(offset + 42), // sort
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43) // speccode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLoginName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKeyType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKeyID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassWord(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhotoName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIdCard(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSex(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAge(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBirthday(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTel(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEmail(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDeptID(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setOrgCode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSms(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setFastchancl(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPost(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPostLevel(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTitle(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTitleLevel(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setMobileTel(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setPoliticalLandscape(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setDegrees(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setEducation(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setGraduated(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setProfessional(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setCountryCode(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setProvinceCode(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setCityCode(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setDistrictCode(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setDeptName(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setOrgName(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setIsSupervisors(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setSupervisorsNumber(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setSupervisorsCardNumber(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setSupervisionYear(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setCreateTime(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setIsDeleted(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setUpdateTime(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setDeleteTime(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setUserLevel(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setSort(cursor.getInt(offset + 42));
        entity.setSpeccode(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
     }
    
    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
