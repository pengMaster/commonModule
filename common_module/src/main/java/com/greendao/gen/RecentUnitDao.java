package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mtm.common_module.recent_unit.RecentUnit;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "T_RECENT_UNIT".
*/
public class RecentUnitDao extends AbstractDao<RecentUnit, String> {

    public static final String TABLENAME = "T_RECENT_UNIT";

    /**
     * Properties of entity RecentUnit.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CompId = new Property(1, String.class, "compId", false, "COMP_ID");
        public final static Property CompName = new Property(2, String.class, "compName", false, "COMP_NAME");
        public final static Property CompNo = new Property(3, String.class, "compNo", false, "COMP_NO");
        public final static Property CompType = new Property(4, String.class, "compType", false, "COMP_TYPE");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property SpecCode = new Property(6, String.class, "specCode", false, "SPEC_CODE");
        public final static Property SpecName = new Property(7, String.class, "specName", false, "SPEC_NAME");
        public final static Property IsWzdw = new Property(8, String.class, "isWzdw", false, "IS_WZDW");
        public final static Property OrgCode = new Property(9, String.class, "orgCode", false, "ORG_CODE");
        public final static Property UserId = new Property(10, String.class, "userId", false, "USER_ID");
        public final static Property LicenseEnd = new Property(11, String.class, "licenseEnd", false, "LICENSE_END");
        public final static Property Contact = new Property(12, String.class, "contact", false, "CONTACT");
    }


    public RecentUnitDao(DaoConfig config) {
        super(config);
    }
    
    public RecentUnitDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"T_RECENT_UNIT\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"COMP_ID\" TEXT," + // 1: compId
                "\"COMP_NAME\" TEXT," + // 2: compName
                "\"COMP_NO\" TEXT," + // 3: compNo
                "\"COMP_TYPE\" TEXT," + // 4: compType
                "\"ADDRESS\" TEXT," + // 5: address
                "\"SPEC_CODE\" TEXT," + // 6: specCode
                "\"SPEC_NAME\" TEXT," + // 7: specName
                "\"IS_WZDW\" TEXT," + // 8: isWzdw
                "\"ORG_CODE\" TEXT," + // 9: orgCode
                "\"USER_ID\" TEXT," + // 10: userId
                "\"LICENSE_END\" TEXT," + // 11: licenseEnd
                "\"CONTACT\" TEXT);"); // 12: contact
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"T_RECENT_UNIT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecentUnit entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String compId = entity.getCompId();
        if (compId != null) {
            stmt.bindString(2, compId);
        }
 
        String compName = entity.getCompName();
        if (compName != null) {
            stmt.bindString(3, compName);
        }
 
        String compNo = entity.getCompNo();
        if (compNo != null) {
            stmt.bindString(4, compNo);
        }
 
        String compType = entity.getCompType();
        if (compType != null) {
            stmt.bindString(5, compType);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String specCode = entity.getSpecCode();
        if (specCode != null) {
            stmt.bindString(7, specCode);
        }
 
        String specName = entity.getSpecName();
        if (specName != null) {
            stmt.bindString(8, specName);
        }
 
        String isWzdw = entity.getIsWzdw();
        if (isWzdw != null) {
            stmt.bindString(9, isWzdw);
        }
 
        String orgCode = entity.getOrgCode();
        if (orgCode != null) {
            stmt.bindString(10, orgCode);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(11, userId);
        }
 
        String licenseEnd = entity.getLicenseEnd();
        if (licenseEnd != null) {
            stmt.bindString(12, licenseEnd);
        }
 
        String contact = entity.getContact();
        if (contact != null) {
            stmt.bindString(13, contact);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecentUnit entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String compId = entity.getCompId();
        if (compId != null) {
            stmt.bindString(2, compId);
        }
 
        String compName = entity.getCompName();
        if (compName != null) {
            stmt.bindString(3, compName);
        }
 
        String compNo = entity.getCompNo();
        if (compNo != null) {
            stmt.bindString(4, compNo);
        }
 
        String compType = entity.getCompType();
        if (compType != null) {
            stmt.bindString(5, compType);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String specCode = entity.getSpecCode();
        if (specCode != null) {
            stmt.bindString(7, specCode);
        }
 
        String specName = entity.getSpecName();
        if (specName != null) {
            stmt.bindString(8, specName);
        }
 
        String isWzdw = entity.getIsWzdw();
        if (isWzdw != null) {
            stmt.bindString(9, isWzdw);
        }
 
        String orgCode = entity.getOrgCode();
        if (orgCode != null) {
            stmt.bindString(10, orgCode);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(11, userId);
        }
 
        String licenseEnd = entity.getLicenseEnd();
        if (licenseEnd != null) {
            stmt.bindString(12, licenseEnd);
        }
 
        String contact = entity.getContact();
        if (contact != null) {
            stmt.bindString(13, contact);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public RecentUnit readEntity(Cursor cursor, int offset) {
        RecentUnit entity = new RecentUnit( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // compId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // compName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // compNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // compType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // specCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // specName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isWzdw
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // orgCode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // licenseEnd
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // contact
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecentUnit entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCompId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCompName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSpecCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSpecName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsWzdw(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOrgCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLicenseEnd(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setContact(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(RecentUnit entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(RecentUnit entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecentUnit entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
